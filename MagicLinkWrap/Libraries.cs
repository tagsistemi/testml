using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MagicLinkWrap
{
    //===================================================================================
    class Strings
    {
        public const string NotePad = "notepad.exe";
        public const string Explorer = "Explorer.exe";
        public const string DocumentObjectsFile = "DocumentObjects.xml";
        public const string TestDir = "Tests";
        public const string BinDir = "\\bin\\";
        public const string Microarea = "Microarea";
        public const string MagicLinkTester = "MagicLinkTester";
        public const string UncheckNamespace = "MagicLinkTester.Images.ResultRed.png";
        public const string CheckNamespace = "MagicLinkTester.Images.ResultGreen.png";
        public const string NoTestSelected = "Please, select a test to execute!";
        public const string ErrorOnLoadingTest = "Error during test directory loading: {0}";
        public const string NoMatches = "No matches found";
        public const string UserNoCompany = "The user {0} has no associated company.";
        public const string LoginManagerSessionCfg = @"\\{0}\{1}_Custom\LoginMngSession.cfg";
        public const string UnableLoadCompanies = "Unable to load companies for installation {0} on server {1} for user {2}. Error: {3}";
        public const string SelectACompany = "Please select a company";
        public const string LogOutUser = "Logout ({0})";
        public const string LogOutEmpty = "Logout";
        public const string ErrorUnableToLogin = "Error: unable to login user {0}";
        public const string Error1 = "Error 1: LoginManager has failed the connection to system database.";
        public const string Error2 = "Error 2: PathFinder Initialization Failure.";
        public const string Error3 = "Error 3: Activation Manager Initialization Failure";
        public const string Error4 = "Error 4: No License.";
        public const string Error5 = "Error 5";
        public const string Error6 = "Error 6: Error reading articles table.";
        public const string Error7 = "Error 7: Reading Activation Files.";
        public const string Error8 = "Error 8: Already Logged On Different Company.";
        public const string Error9 = "Error 9: User Already Logged: Do you want to close previous working session and open a new one?";
        public const string Error10 = "Error 10: No Cal Available. Exceeded number of used Cal (check in Adminstration console if there are available Magic Link Cals) \r\nor invalid Producer Key (Check if the same producer key has been inserted along with Magic Link serial numbers by using the \"Add\" producer key button\"";
        public const string Error11 = "Error 11: User Assignment To Article Failure.";
        public const string Error12 = "Error 12: Process Not Authenticated.";
        public const string Error13 = "Error 13: Invalid User or Password.";
        public const string Error14 = "Error 14: Invalid Process.";
        public const string Error15 = "Error 15: Cannot Change Password.";
        public const string Error16 = "Error 16: Password Expired.";
        public const string Error17 = "Error 17: Password Too Short.";
        public const string Error18 = "Error 18: Database Locked.";
        public const string Error19 = "Error 19: User Must Change Password.";
        public const string Error20 = "Error 20: Generic Login Failure.";
        public const string Error21 = "Error 21: Invalid Company.";
        public const string Error22 = "Error 22: Provider Error.";
        public const string Error23 = "Error 23: Connection Params.";
        public const string Error24 = "Error 24: Login Manager Wrapper Uninitialized.";
        public const string Error25 = "Error 25: Login Manager Not Logged.";
        public const string Error26 = "Error 26: Initializing.";
        public const string Error27 = "Error 27: NotInitializing.";
        public const string Error28 = "Error 28:";
        public const string Error29 = "Error 29: Company Database Not Present";
        public const string Error30 = "Error 30: Company Database Tables Not Present.";
        public const string Error31 = "Error 31: Invalid Database For Activation.";
        public const string Error32 = "Error 32: Web Application Access Denied.";
        public const string Error33 = "Error 33: GDI Application Access Denied.";
        public const string Error34 = "Error 34: No Web License.";
        public const string Error35 = "Error 35: Login Locked.";
        public const string Error36 = "Error 36: Password Already Changed Today.";
        public const string Error37 = "Error 37: Authentication Type Error.";
        public const string Error38 = "Error 38: Invalid Database.";
        public const string Error39 = "Error 39: Unregistered Product.";
        public const string Error40 = "Error 40: NoAdmittedCompany.";
        public const string Error41 = "Error 41: No Office License.";
        public const string Error42 = "Error 42: Web User Already Logged.";
        public const string Error43 = "Error 43: Too Many Assigned CAL.";
        public const string Warning = "Warning";
        public const string Error = "Error";
        public const string InsertProducerKey = "Insert Producer Key";
        public const string LoginText = "Login";
        public const string ServerNotFound = "Server not found";
        public const string TbThreadIsClosing = "The selected thread will be closed, continue?";
        public const string SelectedUserConnected = "The selected user is currently connected to the active Magic Link Tester session, disconnect anyway?";
        public const string NoUserInSlot = "No user in slot number: {0}";
        public const string NoSelectedRow = "No selected row";
        public const string Logged = "Logged";
        public const string KillUnresponsive = "The {0} {1} does not respond. Do you want to terminate it now";
        public const string NoProcesses = "No active processes";
        public const string InvalidData = "Invalid data";
        public const string TbLoader = "TbLoader process ({0})";
        public const string ThreadId = "ThreadId";
        public const string Modal = "(Waiting for user input)";
        public const string Process = "Process";
        public const string Thread = "Thread";
        public const string StandardPath = "\\\\{0}\\{1}_Standard\\";
        public const string CustomPath = "\\\\{0}\\{1}_Custom\\";
        public const string ModuleObjectsPath = "ModuleObjects\\";
        public const string ReportPath = "Report";
        public const string CompaniesPath = "Companies\\";
        public const string AllCompaniesPath = "Companies\\AllCompanies";
        public const string AllUsersString = "AllUsers";
        public const string UserString = "Users\\{0}\\";
        public const string UserUriString = "Users/{0}";
        public const string ExportProfilesName = "ExportProfiles";
        public const string DefaultsXmlPath = "Description\\Defaults.xml";
        public const string EasyLookSystem = "easylooksystem";
        public const string Standard = "Standard";
        public const string Path = "Path";
        public const string Apps = "Apps";
        public const string TbApps = "TbApps";
        public const string InstallationVer = "Installation.ver";
        public const string CacheDate = "CacheDate";
        public const string Publish = "Publish";
        public const string ClickOnceDeployer = "ClickOnceDeployer";
        public const string ClickOnceDeployerExe = "ClickOnceDeployer.exe";
        public const string ApplicationsName = "Applications";
        public const string ApplicationsConfigFile = "Application.config";
        public const string ModuleConfigFile = "Module.config";
        public const string ReportName = "Report";
        public const string DocumentNameString = "DocumentName";
        public const string DocumentNamespaceQuery = "Defaults/DocumentNamespace";
        public const string ApplicationLogFile = "DataTransfer\\Log\\Users\\EasyLookSystem\\Application.log";
        public const string VersionString = "Magic Link Tester V{0}.{1}.{2}";
        public const string InsertOrUpdateAction = "Insert or Update";
        public const string InsertAction = "Insert";
        public const string UpdateAction = "Update";
        public const string DeleteAction = "Delete";
        public const string NoItemSelected = "Please select a document, a report or a profile";
        public const string NoTextSelected = "The SetData text is empty";
        public const string ParametersMissing = "Please insert a valid parameters string";
        public const string NoDataExtracted = "No data extracted";
        public const string ErrorLoadingPdf = "Error loading pdf";
        public const string ShowPage = "Page {0} of {1}";
        public const string Error_1 = "Authentication token for user used to login is not valid.";
        public const string Error_2 = "Login failed for EasyLookSystem user.";
        public const string Error_3 = "Error while starting a new tbLoader.\r\nTry to repair Tbloader status by pressing the \"Repair TbLoader\" button on the toolbar";
        public const string Error_4 = "TbLoader initialization failed. \r\nTry to repair Tbloader status by pressing the \"Repair TbLoader\" button on the toolbar";
        public const string Error_5 = "It's impossible to set application date of new TBLoader instance.";
        public const string NoError = "TbLoader successfully created on TCP/IP port #{0}";
        public const string ErrorOnOperation = "An Error occurred during SetData operation.";
        public const string ElaborationsInProgress = "Asyncronous elaboration in progress, please wait...";
        public const string StressDataInProgress = "Asyncronous operations in process: check the \"Log\" tab to verify results";
        public const string TbloaderRefreshed = "TbLoader successfully refreshed";
        public const string ClearList = "Clear list";
        public const string ServerAndInstallation = " Server: {0} - Installation: {1}";
        public const string UserAndCompany = " User: {0} - Company: {1}";
        public const string StandarPath = "\\\\{0}\\{1}_Standard\\";
        public const string StatusNotConnected = "Current Status: not connected";
        public const string StatusConnecting = "Current Status: connecting to {0}, installation {1}";
        public const string StatusConnected = "Current Status: connected";
        public const string SelectValidInstance = "Please select a valid instance.";
        public const string SharedStandard = "_standard";
        public const string SharedCustom = "_custom";
        public const string InstallationNotFound = "Installations not found or server {0} doesn't exist:";
        public const string DefaultUri = "http://www.microarea.it/Schema/2004/Smart/";
        public const string DefaultDocumentParameters = "<?xml version=\"1.0\" encoding=\"utf-8\"?><maxs:{0} tbNamespace=\"{1}\" xTechProfile=\"{2}\" xmlns:maxs=\"{3}\"><maxs:Parameters></maxs:Parameters></maxs:{0}>";
        public const string DefaultReportParameters = "<?xml version=\"1.0\" encoding=\"utf-8\"?><ns:{0} xmlns:ns=\"{2}\" tbNamespace=\"{1}\"><ns:Parameters /></ns:{0}>";
        public const string TbNamespace = "tbNamespace";
        public const string TestName = "TestName";
        public const string Document = "Document";
        public const string XsdFiles = ".xsd";
        public const string WrmFind = "*.wrm";
        public const string NoDataError = "The section <Data> into xml file of this test is empty. Test cannot be performed. ";
        public const string NoParametersError = "The section <Parameters> into xml file of this test is empty. Test cannot be performed. ";
        public const string GeneralException = "Command has thown the following exception {0}";
        public const string LoginManagerConnectionString = "http://{0}:{1}/{2}/LoginManager/LoginManager.asmx";
        public const string TbServicesConnectionString = "http://{0}:{1}/{2}/TbServices/TbServices.asmx";
        public const string EasyLookServiceConnectionString = "http://{0}:{1}/{2}/EasyLook/EasyLookService.asmx";

    }
}
